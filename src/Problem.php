<?php
    namespace Lou117\Core;

    use \Throwable;
    use \JsonSerializable;

    class Problem implements JsonSerializable
    {
        /**
         * Is debug mode enabled ?
         * @var bool
         */
        public static $debugMode = false;

        /**
         * An human readable explanation specific to this occurrence of the problem.
         * @var string
         */
        public $detail;

        /**
         * Error position returned by Throwable instance (if any).
         * @var string
         */
        public $position;

        /**
         * The HTTP status code generated by the origin server for this occurrence of the problem.
         * @var string
         */
        public $status;

        /**
         * A short, human-readable summary of the problem type.
         * @var string
         */
        public $title;

        /**
         * Debug trace returned by Throwable instance (if any).
         * @var array
         */
        public $trace;

        /**
         * An absolute URI that identifies the problem type.  When dereferenced, it should provide human-readable
         * documentation for the problem type. When this member is not present, its value is assumed to be
         * "about:blank".
         * @var string
         */
        public $type = 'about:blank';


        /**
         * Problem constructor.
         * @param mixed $detail - if a string is passed, this string will be used as API Problem detail. If an instance
         * of Throwable (any PHP-7 error and exceptions), and debug mode is enabled in API settings, content of `
         * Throwable instance will be used to hydrate API Problem instance.
         * @param string|null $doc_uri - URI of corresponding documentation for API Problem.
         */
        public function __construct($detail, string $doc_uri = null)
        {
            if ($detail instanceof Throwable) {

                if (self::$debugMode) {

                    $this->trace = array();
                    $this->detail = $detail->getMessage();
                    $this->position = $detail->getFile() . ' @ line ' . $detail->getLine();

                    $trace = $detail->getTrace();
                    foreach ($trace as $entry) {

                        $signature = $entry['class'] . $entry['type'] . $entry['function'];
                        $this->trace[] = "{$signature}() ({$entry['file']} @ line {$entry['line']})";

                    }

                } else {

                    $this->detail = 'Internal server error';

                }

            } else {

                $this->detail = $detail;

            }

            if (!empty($doc_uri)) {

                $this->type = $doc_uri;

            }
        }

        /**
         * Returns an array to be serialized into JSON.
         * @return array
         */
        public function jsonSerialize()
        {
            $return = array(
                'detail' => $this->detail,
                'status' => $this->status,
                'title' => $this->title,
                'type' => $this->type
            );

            foreach (array('position', 'trace') as $property) {

                if (!empty($this->$property)) {

                    $return[$property] = $this->$property;

                }

            }

            return $return;
        }
    }
